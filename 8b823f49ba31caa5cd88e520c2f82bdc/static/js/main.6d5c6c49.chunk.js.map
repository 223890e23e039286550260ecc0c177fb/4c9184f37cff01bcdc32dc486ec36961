{"version":3,"sources":["states/Raffle.tsx","redux/blockchain/blockchainReducer.ts","redux/data/dataReducer.ts","redux/app.ts","redux/store.ts","redux/data/dataActions.ts","redux/blockchain/blockchainActions.ts","states/Mint.tsx","App.tsx","reportWebVitals.ts","theme.ts","index.tsx"],"names":["RAFFLE_STATE","initialState","loading","account","minter","mintPass","erc721","web3","errorMsg","networkId","hasParticipatedInRaffle","blockchainReducer","state","action","type","payload","totalSupply","availableSupply","CONFIG","MAX_SUPPLY","price","PUBLIC_WEI_COST","maxPerTx","mintPaused","mintEnded","whitelistedOnly","error","dataReducer","isLoading","appReducer","rootReducer","combineReducers","blockchain","data","app","middleware","thunk","composeEnhancers","compose","applyMiddleware","store","createStore","fetchDataFailed","fetchData","dispatch","a","getState","methods","call","MAX_PER_TX","console","log","connectSuccess","updateRaffleStatus","web3Modal","Web3Modal","cacheProvider","providerOptions","connect","clearCachedProvider","provider","Web3","eth","getAccounts","accounts","net","getId","Contract","minterABI","MINTER_ADDRESS","mintPassABI","MINTPASS_ADDRESS","erc721ABI","ERC721_ADDRESS","on","updateAccount","fetch","API_URL","headers","Accept","response","json","status","Raffle","useDispatch","useState","OPEN","raffleState","useSelector","useEffect","getData","NOT_STARTED","Stack","spacing","flex","Typography","variant","gutterBottom","align","LoadingButton","onClick","e","personal","sign","signature","method","body","JSON","stringify","address","fullWidth","CLOSED","justifyContent","direction","alignItems","CircularProgress","size","Button","preventDefault","MINT_STATE","Actions","claimingNft","setClaimingNft","mintAmount","setMintAmount","setError","mintReceipt","setMintReceipt","claimNFTs","cost","WL_WEI_COST","mint","send","to","from","value","receipt","err","message","getMintState","NETWORK","ID","WRONG_NETWORK","CLAIMING","MINTED","whitelistedAddresses","includes","PUBLIC_SALE","WHITELISTED_ONLY","LOADING","NOT_CONNECTED","Alert","severity","NAME","FilledInput","disableUnderline","startAdornment","InputAdornment","position","IconButton","newMintAmount","decrementMintAmount","disabled","endAdornment","Math","min","incrementMintAmount","inputProps","style","textAlign","href","MARKETPLACE_LINK","transactionHash","Mint","Box","SYMBOL","App","PRIMARY_STATE","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","createTheme","palette","mode","primary","main","background","default","typography","fontSize","fontFamily","button","textTransform","fontWeight","h2","letterSpacing","body1","lineHeight","subtitle1","subtitle2","shape","borderRadius","components","MuiButtonBase","defaultProps","disableRipple","disableTouchRipple","MuiButton","disableFocusRipple","disableElevation","styleOverrides","root","height","MuiFilledInput","input","padding","ReactDOM","render","StrictMode","ThemeProvider","theme","document","getElementById"],"mappings":"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","file":"static/js/main.6d5c6c49.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { sign } from \"../redux/blockchain/blockchainActions\";\nimport Typography from \"@mui/material/Typography\";\nimport Stack from \"@mui/material/Stack\";\nimport Button from \"@mui/material/Button\";\nimport LoadingButton from \"@mui/lab/LoadingButton\";\nimport { connect } from \"../redux/blockchain/blockchainActions\";\nimport { fetchData } from \"../redux/data/dataActions\";\nimport CircularProgress from \"@mui/material/CircularProgress\";\n\nenum RAFFLE_STATE {\n  NOT_CONNECTED,\n  NOT_STARTED,\n  OPEN,\n  ALREADY_PARTICIPATED,\n  CLOSED,\n}\n\nexport default function Raffle() {\n  const dispatch = useDispatch();\n  const [raffleState, setRaffleState] = useState<RAFFLE_STATE>(\n    RAFFLE_STATE.OPEN\n  );\n  const blockchain = useSelector<any, any>((state) => state.blockchain);\n  useEffect(() => getData(), [blockchain.account]);\n  const getData = () => {\n    if (blockchain.account !== \"\" && blockchain.minter !== null) {\n      dispatch(fetchData());\n    }\n  };\n  if (raffleState === RAFFLE_STATE.NOT_STARTED) {\n    return (\n      <Stack spacing={2} flex={1}>\n        <Typography variant=\"h2\">Raffle will soon start</Typography>\n        <Typography variant=\"body1\" gutterBottom align=\"center\">\n          Come back later to participate in the raffle to get a chance to get\n          whitelisted.\n        </Typography>\n      </Stack>\n    );\n  } else if (!blockchain.account && raffleState === RAFFLE_STATE.OPEN) {\n    return (\n      <Stack spacing={2} flex={1}>\n        <Typography variant=\"h2\">Raffle is now open</Typography>\n        <Typography variant=\"body1\" gutterBottom align=\"center\">\n          Connect with your wallet to join the raffle, and get a chance to get\n          whitelisted.\n        </Typography>\n        <Button\n          onClick={(e) => {\n            e.preventDefault();\n            dispatch(connect());\n            getData();\n          }}\n          variant=\"contained\"\n          fullWidth\n        >\n          Connect Your Wallet\n        </Button>\n      </Stack>\n    );\n  } else if (\n    raffleState === RAFFLE_STATE.OPEN &&\n    blockchain.hasParticipatedInRaffle === false\n  ) {\n    return (\n      <Stack spacing={2} flex={1}>\n        <Typography variant=\"h2\">Take now part in raffle</Typography>\n        <Typography variant=\"body1\" gutterBottom align=\"center\">\n          Simply click the button below to take part in the raffle without\n          paying any gas.\n        </Typography>\n        <LoadingButton\n          variant=\"contained\"\n          onClick={(e) => {\n            dispatch(sign());\n          }}\n          fullWidth\n        >\n          Join Raffle\n        </LoadingButton>\n      </Stack>\n    );\n  } else if (\n    (raffleState === RAFFLE_STATE.OPEN ||\n      raffleState === RAFFLE_STATE.CLOSED) &&\n    blockchain.hasParticipatedInRaffle === true\n  ) {\n    return (\n      <Stack spacing={2} flex={1}>\n        <Typography variant=\"h2\">\n          You claimed your spot in the raffle\n        </Typography>\n        <Typography variant=\"body1\" gutterBottom align=\"center\">\n          Make sure to follow us to get notified when the results are in and the\n          mint starts.\n        </Typography>\n      </Stack>\n    );\n  } else if (raffleState === RAFFLE_STATE.CLOSED) {\n    return (\n      <Stack spacing={2} flex={1}>\n        <Typography variant=\"h2\">The raffle has been closed</Typography>\n        <Typography variant=\"body1\" gutterBottom align=\"center\"></Typography>\n      </Stack>\n    );\n  }\n  return (\n    <Stack spacing={2} justifyContent=\"space-between\" flex={1}>\n      <Stack direction=\"column\" justifyContent=\"center\" alignItems=\"center\">\n        <CircularProgress size={24} />\n      </Stack>\n    </Stack>\n  );\n}\n","const initialState = {\n  loading: false,\n  account: null,\n  minter: null,\n  mintPass: null,\n  erc721: null,\n  web3: null,\n  errorMsg: \"\",\n  networkId: null,\n  hasParticipatedInRaffle: null,\n};\n\nconst blockchainReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"CONNECTION_REQUEST\":\n      return {\n        ...initialState,\n        loading: true,\n      };\n    case \"CONNECTION_SUCCESS\":\n      return {\n        ...state,\n        loading: false,\n        account: action.payload.account,\n        minter: action.payload.minter,\n        mintPass: action.payload.mintPass,\n        erc721: action.payload.erc721,\n        web3: action.payload.web3,\n        networkId: action.payload.networkId,\n      };\n    case \"CONNECTION_FAILED\":\n      return {\n        ...initialState,\n        loading: false,\n        errorMsg: action.payload,\n      };\n    case \"UPDATE_ACCOUNT\":\n      return {\n        ...state,\n        account: action.payload.account,\n      };\n    case \"RAFFLE_STATUS\":\n      return {\n        ...state,\n        hasParticipatedInRaffle: action.payload.hasParticipatedInRaffle,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default blockchainReducer;\n","import CONFIG from \"../../config.json\";\n\nconst initialState = {\n  loading: false,\n  totalSupply: \"?\",\n  availableSupply: CONFIG.MAX_SUPPLY,\n  price: CONFIG.PUBLIC_WEI_COST / 1e18,\n  maxPerTx: null,\n  mintPaused: null,\n  mintEnded: null,\n  whitelistedOnly: null,\n  error: false,\n  errorMsg: \"\",\n};\n\nconst dataReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"CHECK_DATA_REQUEST\":\n      return {\n        ...state,\n        loading: true,\n        error: false,\n        errorMsg: \"\",\n      };\n    case \"CHECK_DATA_SUCCESS\":\n      return {\n        ...state,\n        loading: false,\n        totalSupply: action.payload.totalSupply,\n        availableSupply: action.payload.availableSupply,\n        price: action.payload.price,\n        maxPerTx: action.payload.maxPerTx,\n        mintPaused: action.payload.mintPaused,\n        mintEnded: action.payload.mintEnded,\n        whitelistedOnly: action.payload.whitelistedOnly,\n        error: false,\n        errorMsg: \"\",\n      };\n    case \"CHECK_DATA_FAILED\":\n      return {\n        ...initialState,\n        loading: false,\n        error: true,\n        errorMsg: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default dataReducer;\n","export interface IApp {\n  isLoading: boolean;\n}\n\nconst initialState = {\n  isLoading: false,\n};\n\nconst appReducer = (state = initialState, action) => {\n  switch (action.type) {\n    default:\n      return state;\n  }\n};\n\nexport default appReducer;\n","import { applyMiddleware, compose, createStore, combineReducers } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport blockchainReducer from \"./blockchain/blockchainReducer\";\nimport dataReducer from \"./data/dataReducer\";\nimport appReducer from \"./app\";\n\nconst rootReducer = combineReducers({\n  blockchain: blockchainReducer,\n  data: dataReducer,\n  app: appReducer,\n});\n\nconst middleware = [thunk];\nconst composeEnhancers = compose(applyMiddleware(...middleware));\n\nconst configureStore = () => {\n  return createStore(rootReducer, composeEnhancers);\n};\n\nconst store = configureStore();\n\nexport default store;\n","import store from \"../store\";\n\nconst fetchDataRequest = () => {\n  return {\n    type: \"CHECK_DATA_REQUEST\",\n  };\n};\n\nconst fetchDataSuccess = (payload) => {\n  return {\n    type: \"CHECK_DATA_SUCCESS\",\n    payload: payload,\n  };\n};\n\nconst fetchDataFailed = (payload) => {\n  return {\n    type: \"CHECK_DATA_FAILED\",\n    payload: payload,\n  };\n};\n\nexport const fetchData = () => {\n  return async (dispatch) => {\n    dispatch(fetchDataRequest());\n    try {\n      let totalSupply = await store\n        .getState()\n        .blockchain.erc721.methods.totalSupply()\n        .call();\n\n      let availableSupply = await store\n        .getState()\n        .blockchain.minter.methods.availableSupply()\n        .call();\n\n      // let price = await store\n      //   .getState()\n      //   .blockchain.minter.methods.PRICE()\n      //   .call();\n\n      let maxPerTx = await store\n        .getState()\n        .blockchain.minter.methods.MAX_PER_TX()\n        .call();\n\n      let mintPaused = await store\n        .getState()\n        .blockchain.minter.methods.mintPaused()\n        .call();\n\n      let mintEnded = await store\n        .getState()\n        .blockchain.minter.methods.mintEnded()\n        .call();\n\n      let whitelistedOnly = await store\n        .getState()\n        .blockchain.minter.methods.whitelistedOnly()\n        .call();\n\n      dispatch(\n        fetchDataSuccess({\n          totalSupply: +totalSupply,\n          availableSupply: +availableSupply,\n          // price: price,\n          maxPerTx: +maxPerTx,\n          mintPaused,\n          mintEnded,\n          whitelistedOnly,\n        })\n      );\n    } catch (err) {\n      console.log(err);\n      dispatch(fetchDataFailed(\"Could not load data from contract.\"));\n    }\n  };\n};\n","import Web3EthContract from \"web3-eth-contract\";\nimport Web3 from \"web3\";\nimport Web3Modal from \"web3modal\";\nimport WalletConnect from \"@walletconnect/web3-provider\";\nimport WalletLink from \"walletlink\";\nimport { fetchData } from \"../data/dataActions\";\nimport minterABI from \"../../abi/minter.json\";\nimport mintPassABI from \"../../abi/mintpass.json\";\nimport erc721ABI from \"../../abi/erc721.json\";\nimport CONFIG from \"../../config.json\";\n\nconst connectRequest = () => {\n  return {\n    type: \"CONNECTION_REQUEST\",\n  };\n};\n\nconst connectSuccess = (payload) => {\n  return {\n    type: \"CONNECTION_SUCCESS\",\n    payload: payload,\n  };\n};\n\nconst connectFailed = (payload) => {\n  return {\n    type: \"CONNECTION_FAILED\",\n    payload: payload,\n  };\n};\n\nconst updateAccountRequest = (payload) => {\n  return {\n    type: \"UPDATE_ACCOUNT\",\n    payload: payload,\n  };\n};\n\nconst receiveNetworkId = (payload) => {\n  return {\n    type: \"RECEIVE_NETWORK\",\n    payload: payload,\n  };\n};\n\nconst updateRaffleStatus = (payload) => {\n  return {\n    type: \"RAFFLE_STATUS\",\n    payload: payload,\n  };\n};\n\nconst providerOptions = {\n  // walletconnect: {\n  //   package: WalletConnect,\n  //   options: {\n  //     infuraId: \"INFURA_ID\",\n  //   },\n  // },\n  // walletlink: {\n  //   package: WalletLink,\n  //   options: {\n  //     appName: \"Web3Modal Example App\",\n  //     infuraId: \"\",\n  //   },\n  // },\n};\nconst web3Modal = new Web3Modal({\n  // network: \"mainnet\", // optional\n  cacheProvider: true, // optional\n  providerOptions, // required\n  // disableInjectedProvider: true,\n});\n\nexport const connect = () => {\n  return async (dispatch) => {\n    await web3Modal.clearCachedProvider();\n    console.log(web3Modal);\n    const provider = await web3Modal.connect();\n    dispatch(connectRequest());\n    // Web3EthContract.setProvider(provider);\n    let web3 = new Web3(provider);\n    try {\n      const accounts = await web3.eth.getAccounts();\n      const networkId = await web3.eth.net.getId();\n      const minter = new web3.eth.Contract(\n        // @ts-expect-error\n        minterABI,\n        CONFIG.MINTER_ADDRESS\n      );\n      const mintPass = new web3.eth.Contract(\n        // @ts-expect-error\n        mintPassABI,\n        CONFIG.MINTPASS_ADDRESS\n      );\n      const erc721 = new web3.eth.Contract(\n        // @ts-expect-error\n        erc721ABI,\n        CONFIG.ERC721_ADDRESS\n      );\n      dispatch(\n        connectSuccess({\n          account: accounts[0],\n          minter,\n          mintPass,\n          erc721,\n          web3,\n          networkId,\n        })\n      );\n      provider.on(\"accountsChanged\", (accounts) => {\n        dispatch(updateAccount(accounts[0]));\n      });\n      provider.on(\"chainChanged\", async () => {\n        const networkId = await web3.eth.net.getId();\n        dispatch(\n          connectSuccess({\n            account: accounts[0],\n            minter,\n            mintPass,\n            erc721,\n            web3,\n            networkId,\n          })\n        );\n      });\n      const response = await fetch(`${CONFIG.API_URL}/raffle/${accounts[0]}`, {\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n        },\n      });\n      const { status } = await response.json();\n      const hasParticipated = status === \"participated\";\n      dispatch(\n        updateRaffleStatus({ hasParticipatedInRaffle: hasParticipated })\n      );\n    } catch (err) {\n      dispatch(connectFailed(\"Something went wrong.\"));\n    }\n  };\n};\n\nexport const sign = () => {\n  return async (dispatch) => {\n    // await web3Modal.clearCachedProvider();\n    const provider = await web3Modal.connect();\n    // dispatch(connectRequest());\n    let web3 = new Web3(provider);\n    try {\n      const accounts = await web3.eth.getAccounts();\n      const signature = await web3.eth.personal.sign(\n        \"Rawrr\",\n        accounts[0],\n        null\n      );\n      await fetch(`${CONFIG.API_URL}/raffle`, {\n        method: \"POST\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          address: accounts[0],\n          signature: signature,\n        }),\n      });\n      const response = await fetch(`${CONFIG.API_URL}/raffle/${accounts[0]}`, {\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n        },\n      });\n      const { status } = await response.json();\n      const hasParticipated = status === \"participated\";\n      dispatch(\n        updateRaffleStatus({ hasParticipatedInRaffle: hasParticipated })\n      );\n    } catch (err) {\n      console.error(err);\n    }\n  };\n};\n\nexport const updateAccount = (account) => {\n  return async (dispatch) => {\n    dispatch(updateAccountRequest({ account: account }));\n    dispatch(fetchData());\n  };\n};\n","import React, { useEffect, useState, useRef } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchData } from \"../redux/data/dataActions\";\nimport { connect } from \"../redux/blockchain/blockchainActions\";\nimport Typography from \"@mui/material/Typography\";\nimport Stack from \"@mui/material/Stack\";\nimport Button from \"@mui/material/Button\";\nimport Box from \"@mui/material/Box\";\nimport Alert from \"@mui/material/Alert\";\nimport FilledInput from \"@mui/material/FilledInput\";\nimport InputAdornment from \"@mui/material/InputAdornment\";\nimport IconButton from \"@mui/material/IconButton\";\nimport RemoveOutlinedIcon from \"@mui/icons-material/RemoveOutlined\";\nimport AddOutlinedIcon from \"@mui/icons-material/AddOutlined\";\nimport LoadingButton from \"@mui/lab/LoadingButton\";\nimport CircularProgress from \"@mui/material/CircularProgress\";\n\nimport CONFIG from \"../config.json\";\nimport whitelistedAddresses from \"../whitelist.json\";\n\nenum MINT_STATE {\n  NOT_CONNECTED,\n  WRONG_NETWORK,\n  CONNECTED,\n  NOT_STARTED,\n  WHITELISTED_ONLY,\n  PUBLIC_SALE,\n  PRE_SALE,\n  CLAIMING,\n  MINTED,\n  ERROR,\n  CLOSED,\n  LOADING,\n}\n\nfunction Actions() {\n  const dispatch = useDispatch();\n  const data = useSelector<any, any>((state) => state.data);\n  const blockchain = useSelector<any, any>((state) => state.blockchain);\n  const [claimingNft, setClaimingNft] = useState(false);\n  const [mintAmount, setMintAmount] = useState(1);\n  const [error, setError] = useState(\"\");\n  const [mintReceipt, setMintReceipt] = useState(null);\n  const getData = () => {\n    if (blockchain.account !== \"\" && blockchain.minter !== null) {\n      dispatch(fetchData());\n    }\n  };\n\n  useEffect(() => getData(), [blockchain.account]);\n\n  function catchError(err: Error) {\n    console.error(err);\n    if (err.message) {\n      setError(err.message);\n    } else {\n      setError(\"Something went wrong while trying to mint the NFT\");\n    }\n  }\n\n  const claimNFTs = async () => {\n    setClaimingNft(true);\n    try {\n      const cost = data.whitelistedOnly\n        ? CONFIG.WL_WEI_COST\n        : CONFIG.PUBLIC_WEI_COST;\n      const receipt = await blockchain.minter.methods.mint(mintAmount).send({\n        to: CONFIG.MINTER_ADDRESS,\n        from: blockchain.account,\n        value: cost * mintAmount,\n      });\n      console.log(receipt);\n      setClaimingNft(false);\n      setMintReceipt(receipt);\n      dispatch(fetchData());\n    } catch (err) {\n      catchError(err);\n      setClaimingNft(false);\n    }\n  };\n\n  const decrementMintAmount = () => {\n    let newMintAmount = mintAmount - 1;\n    if (newMintAmount < 1) {\n      newMintAmount = 1;\n    }\n    setMintAmount(newMintAmount);\n  };\n\n  const incrementMintAmount = () => {\n    let newMintAmount = mintAmount + 1;\n    if (\n      newMintAmount <=\n      Math.min(data.maxPerTx, data.availableSupply - data.totalSupply)\n    ) {\n      setMintAmount(newMintAmount);\n    }\n  };\n\n  function getMintState(): MINT_STATE {\n    if (!blockchain.account || blockchain.minter === null) {\n      return MINT_STATE.NOT_CONNECTED;\n    } else if (blockchain.networkId != CONFIG.NETWORK.ID) {\n      return MINT_STATE.WRONG_NETWORK;\n    } else if (data.mintPaused) {\n      return MINT_STATE.NOT_STARTED;\n    } else if (claimingNft) {\n      return MINT_STATE.CLAIMING;\n    } else if (mintReceipt) {\n      return MINT_STATE.MINTED;\n    } else if (data.totalSupply >= data.availableSupply || data.mintEnded) {\n      return MINT_STATE.CLOSED;\n    } else if (data.whitelistedOnly) {\n      const isWhitelisted = whitelistedAddresses.includes(blockchain.account);\n      return isWhitelisted\n        ? MINT_STATE.PUBLIC_SALE\n        : MINT_STATE.WHITELISTED_ONLY;\n    } else if (data.mintPaused === false) {\n      return MINT_STATE.PUBLIC_SALE;\n    }\n    return MINT_STATE.LOADING;\n  }\n\n  if (getMintState() === MINT_STATE.NOT_CONNECTED) {\n    return (\n      <div>\n        <Button\n          onClick={(e) => {\n            e.preventDefault();\n            dispatch(connect());\n            getData();\n          }}\n          variant=\"contained\"\n          fullWidth\n        >\n          Connect Your Wallet\n        </Button>\n      </div>\n    );\n  } else if (getMintState() === MINT_STATE.WRONG_NETWORK) {\n    return (\n      <Alert variant=\"outlined\" severity=\"error\">\n        You are not connected to the {CONFIG.NETWORK.NAME} network, please open\n        Metamask and make sure you are connected with the right account to the\n        Ethereum network.\n      </Alert>\n    );\n  } else if (getMintState() === MINT_STATE.NOT_STARTED) {\n    return (\n      <Stack\n        direction=\"column\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n        spacing={1.25}\n      >\n        <Typography variant=\"h2\">Minting is yet to start.</Typography>\n        <Typography variant=\"body1\" gutterBottom align=\"center\">\n          Once minting starts, you will be able to mint NFTs here.\n        </Typography>\n      </Stack>\n    );\n  } else if (\n    getMintState() === MINT_STATE.PUBLIC_SALE ||\n    getMintState() === MINT_STATE.CLAIMING\n  ) {\n    return (\n      <>\n        <Stack direction=\"row\" spacing={4}>\n          <FilledInput\n            value={mintAmount}\n            disableUnderline\n            startAdornment={\n              <InputAdornment position=\"start\">\n                <IconButton\n                  aria-label=\"decrement\"\n                  size=\"small\"\n                  onClick={(e) => {\n                    e.preventDefault();\n                    decrementMintAmount();\n                  }}\n                  disabled={getMintState() === MINT_STATE.CLAIMING}\n                >\n                  <RemoveOutlinedIcon />\n                </IconButton>\n              </InputAdornment>\n            }\n            endAdornment={\n              <InputAdornment position=\"start\">\n                <IconButton\n                  aria-label=\"decrement\"\n                  size=\"small\"\n                  onClick={(e) => {\n                    e.preventDefault();\n                    incrementMintAmount();\n                  }}\n                  disabled={getMintState() === MINT_STATE.CLAIMING}\n                >\n                  <AddOutlinedIcon />\n                </IconButton>\n              </InputAdornment>\n            }\n            inputProps={{\n              style: {\n                textAlign: \"center\",\n              },\n            }}\n            fullWidth\n          />\n          <LoadingButton\n            disabled={getMintState() === MINT_STATE.CLAIMING}\n            loading={getMintState() === MINT_STATE.CLAIMING}\n            variant=\"contained\"\n            onClick={(e) => {\n              e.preventDefault();\n              claimNFTs();\n              getData();\n            }}\n            fullWidth\n          >\n            Mint NFT\n          </LoadingButton>\n        </Stack>\n        {error && (\n          <Alert variant=\"outlined\" severity=\"error\">\n            {error}\n          </Alert>\n        )}\n      </>\n    );\n  } else if (getMintState() === MINT_STATE.CLOSED) {\n    return (\n      <Stack\n        direction=\"column\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n        spacing={1.25}\n      >\n        <Typography variant=\"h2\">Minting period has ended</Typography>\n        <Typography variant=\"body1\" gutterBottom align=\"center\">\n          The whole collection be will revealed soon, go to OpenSea to check it\n          out!\n        </Typography>\n        <Button variant=\"contained\" href={CONFIG.MARKETPLACE_LINK}>\n          See collection\n        </Button>\n      </Stack>\n    );\n  } else if (getMintState() === MINT_STATE.MINTED) {\n    return (\n      <Stack\n        direction=\"column\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n        spacing={1.25}\n      >\n        {/* <Typography variant=\"h2\">NFT has been minted</Typography> */}\n        <Typography variant=\"body1\" gutterBottom align=\"center\">\n          NFT has been minted! It should soon be visible in your OpenSea\n          account, you can check the transaction below to follow it's progress.\n        </Typography>\n        <Button\n          variant=\"contained\"\n          href={`https://etherscan.io/tx/${mintReceipt.transactionHash}`}\n        >\n          View Transaction\n        </Button>\n      </Stack>\n    );\n  } else if (getMintState() === MINT_STATE.WHITELISTED_ONLY) {\n    return (\n      <Stack\n        direction=\"column\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n        spacing={1.25}\n      >\n        <Typography variant=\"h2\">You are not whitelisted</Typography>\n        <Typography variant=\"body1\" gutterBottom align=\"center\"></Typography>\n      </Stack>\n    );\n  }\n  return (\n    <Stack direction=\"column\" justifyContent=\"center\" alignItems=\"center\">\n      <CircularProgress size={24} />\n    </Stack>\n  );\n}\n\nexport default function Mint() {\n  const data = useSelector<any, any>((state) => state.data);\n  const cost = data.whitelistedOnly\n    ? CONFIG.WL_WEI_COST\n    : CONFIG.PUBLIC_WEI_COST;\n  return (\n    <Stack spacing={2} justifyContent=\"space-between\" flex={1}>\n      <Stack direction=\"row\" justifyContent=\"space-between\">\n        <Box>\n          <Typography variant=\"subtitle2\" align=\"left\" gutterBottom>\n            Price\n          </Typography>\n          <Typography variant=\"subtitle1\" align=\"left\">\n            {cost / 1e18} {CONFIG.NETWORK.SYMBOL}\n          </Typography>\n        </Box>\n        <Box>\n          <Typography variant=\"subtitle2\" align=\"right\" gutterBottom>\n            Total Minted\n          </Typography>\n          <Typography variant=\"subtitle1\" align=\"right\">\n            {data.totalSupply}/{data.availableSupply}\n          </Typography>\n        </Box>\n      </Stack>\n      <Actions />\n    </Stack>\n  );\n  return null;\n}\n","import React, { useState } from \"react\";\nimport Raffle from \"./states/Raffle\";\nimport Mint from \"./states/Mint\";\nimport CONFIG from \"./config.json\";\n\nfunction App() {\n  if (CONFIG.PRIMARY_STATE === \"RAFFLE\") {\n    return <Raffle />;\n  } else if (CONFIG.PRIMARY_STATE === \"MINT\") {\n    return <Mint />;\n  }\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createTheme } from \"@mui/material/styles\";\n\nexport default createTheme({\n  palette: {\n    mode: \"dark\",\n    primary: {\n      main: \"#b79861\",\n    },\n    background: {\n      default: \"#1d1c2e\",\n    },\n  },\n  typography: {\n    fontSize: 16,\n    fontFamily: \"inherit\",\n    button: {\n      textTransform: \"none\",\n      fontSize: \"1rem\",\n      fontWeight: 600,\n    },\n    h2: {\n      fontSize: \"1.6rem\",\n      fontWeight: 500,\n      letterSpacing: \"1.3px\",\n    },\n    body1: {\n      fontSize: \"1rem\",\n      fontWeight: 400,\n      lineHeight: \"1.5rem\",\n    },\n    subtitle1: {\n      fontSize: \"1.25rem\",\n      fontWeight: 500,\n    },\n    subtitle2: {\n      fontSize: \"0.875rem\",\n      textTransform: \"uppercase\",\n      fontWeight: 400,\n      letterSpacing: \"0.125rem\",\n    },\n  },\n  shape: {\n    borderRadius: 0,\n  },\n  components: {\n    MuiButtonBase: {\n      defaultProps: {\n        disableRipple: true,\n        disableTouchRipple: true,\n      },\n    },\n    MuiButton: {\n      defaultProps: {\n        disableRipple: true,\n        disableFocusRipple: true,\n        disableTouchRipple: true,\n        disableElevation: true,\n      },\n      styleOverrides: {\n        root: {\n          height: \"44px\",\n        },\n      },\n    },\n    MuiFilledInput: {\n      styleOverrides: {\n        input: {\n          padding: \"8px 0\",\n        },\n      },\n    },\n  },\n});\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport store from \"./redux/store\";\nimport { Provider } from \"react-redux\";\nimport { ThemeProvider } from \"@mui/material/styles\";\nimport { CssBaseline, GlobalStyles } from \"@mui/material\";\nimport { Web3ContextProvider } from \"./web3-context\";\nimport theme from \"./theme\";\nimport \"./styles/widget.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <App />\n      </ThemeProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}