{"version":3,"sources":["states/Raffle.tsx","redux/blockchain/blockchainReducer.ts","redux/data/dataReducer.ts","redux/app.ts","redux/store.ts","redux/data/dataActions.ts","redux/blockchain/blockchainActions.ts","states/Mint.tsx","App.tsx","reportWebVitals.ts","theme.ts","index.tsx"],"names":["RAFFLE_STATE","initialState","loading","account","minter","mintPass","erc721","web3","errorMsg","networkId","hasParticipatedInRaffle","blockchainReducer","state","action","type","payload","totalSupply","availableSupply","CONFIG","MAX_SUPPLY","price","PUBLIC_WEI_COST","maxPerWallet","mintPaused","mintEnded","whitelistedOnly","isWhitelisted","amountMinted","error","dataReducer","isLoading","appReducer","rootReducer","combineReducers","blockchain","data","app","middleware","thunk","composeEnhancers","compose","applyMiddleware","store","createStore","fetchDataFailed","fetchData","dispatch","a","getState","methods","call","MAX_PER_WALLET","whitelisted","mintedSale","console","log","connectSuccess","providerOptions","walletlink","package","WalletLink","options","appName","infuraId","web3Modal","Web3Modal","cacheProvider","connect","clearCachedProvider","provider","Web3","eth","getAccounts","accounts","net","getId","Contract","minterABI","MINTER_ADDRESS","mintPassABI","MINTPASS_ADDRESS","erc721ABI","ERC721_ADDRESS","on","updateAccount","Raffle","useDispatch","useState","OPEN","raffleState","useSelector","useEffect","getData","NOT_STARTED","Stack","spacing","flex","Typography","variant","gutterBottom","align","LoadingButton","onClick","e","personal","sign","signature","fetch","API_URL","method","headers","Accept","body","JSON","stringify","address","response","json","status","fullWidth","CLOSED","justifyContent","direction","alignItems","CircularProgress","size","Button","preventDefault","MINT_STATE","Phases","Actions","claimingNft","setClaimingNft","mintAmount","setMintAmount","setError","mintReceipt","setMintReceipt","claimNFTs","cost","WL_WEI_COST","mint","send","to","from","value","receipt","err","message","getMintState","NETWORK","ID","WRONG_NETWORK","CLAIMING","MINTED","PUBLIC_SALE","WHITELISTED_ONLY","LOADING","NOT_CONNECTED","isMobile","window","ethereum","Link","href","Alert","severity","NAME","FilledInput","disableUnderline","startAdornment","InputAdornment","position","IconButton","newMintAmount","decrementMintAmount","disabled","endAdornment","Math","min","incrementMintAmount","inputProps","style","textAlign","MARKETPLACE_LINK","target","transactionHash","TIMES","getPhase","now","Date","WhitelistedOnly","Public","NotStarted","Mint","Notification","requestPermission","str","phase","mb","Box","Chip","label","length","slice","icon","sx","fontSize","marginLeft","color","SYMBOL","date","renderer","days","hours","minutes","seconds","completed","App","PRIMARY_STATE","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","createTheme","palette","mode","primary","main","background","default","typography","fontFamily","button","textTransform","fontWeight","h2","letterSpacing","body1","lineHeight","subtitle1","subtitle2","shape","borderRadius","components","MuiButtonBase","defaultProps","disableRipple","disableTouchRipple","MuiButton","disableFocusRipple","disableElevation","styleOverrides","root","height","MuiFilledInput","input","padding","MuiAlert","ReactDOM","render","StrictMode","ThemeProvider","theme","document","getElementById"],"mappings":"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","file":"static/js/main.85ee55e7.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { sign } from \"../redux/blockchain/blockchainActions\";\nimport Typography from \"@mui/material/Typography\";\nimport Stack from \"@mui/material/Stack\";\nimport Button from \"@mui/material/Button\";\nimport LoadingButton from \"@mui/lab/LoadingButton\";\nimport { connect } from \"../redux/blockchain/blockchainActions\";\nimport { fetchData } from \"../redux/data/dataActions\";\nimport CircularProgress from \"@mui/material/CircularProgress\";\n\nenum RAFFLE_STATE {\n  NOT_CONNECTED,\n  NOT_STARTED,\n  OPEN,\n  ALREADY_PARTICIPATED,\n  CLOSED,\n}\n\nexport default function Raffle() {\n  const dispatch = useDispatch();\n  const [raffleState, setRaffleState] = useState<RAFFLE_STATE>(\n    RAFFLE_STATE.OPEN\n  );\n  const blockchain = useSelector<any, any>((state) => state.blockchain);\n  useEffect(() => getData(), [blockchain.account]);\n  const getData = () => {\n    if (blockchain.account !== \"\" && blockchain.minter !== null) {\n      dispatch(fetchData());\n    }\n  };\n  if (raffleState === RAFFLE_STATE.NOT_STARTED) {\n    return (\n      <Stack spacing={2} flex={1}>\n        <Typography variant=\"h2\">Raffle will soon start</Typography>\n        <Typography variant=\"body1\" gutterBottom align=\"center\">\n          Come back later to participate in the raffle to get a chance to get\n          whitelisted.\n        </Typography>\n      </Stack>\n    );\n  } else if (!blockchain.account && raffleState === RAFFLE_STATE.OPEN) {\n    return (\n      <Stack spacing={2} flex={1}>\n        <Typography variant=\"h2\">Raffle is now open</Typography>\n        <Typography variant=\"body1\" gutterBottom align=\"center\">\n          Connect with your wallet to join the raffle, and get a chance to get\n          whitelisted.\n        </Typography>\n        <Button\n          onClick={(e) => {\n            e.preventDefault();\n            dispatch(connect());\n            getData();\n          }}\n          variant=\"contained\"\n          fullWidth\n        >\n          Connect Your Wallet\n        </Button>\n      </Stack>\n    );\n  } else if (\n    raffleState === RAFFLE_STATE.OPEN &&\n    blockchain.hasParticipatedInRaffle === false\n  ) {\n    return (\n      <Stack spacing={2} flex={1}>\n        <Typography variant=\"h2\">Take now part in raffle</Typography>\n        <Typography variant=\"body1\" gutterBottom align=\"center\">\n          Simply click the button below to take part in the raffle without\n          paying any gas.\n        </Typography>\n        <LoadingButton\n          variant=\"contained\"\n          onClick={(e) => {\n            dispatch(sign());\n          }}\n          fullWidth\n        >\n          Join Raffle\n        </LoadingButton>\n      </Stack>\n    );\n  } else if (\n    (raffleState === RAFFLE_STATE.OPEN ||\n      raffleState === RAFFLE_STATE.CLOSED) &&\n    blockchain.hasParticipatedInRaffle === true\n  ) {\n    return (\n      <Stack spacing={2} flex={1}>\n        <Typography variant=\"h2\">\n          You claimed your spot in the raffle\n        </Typography>\n        <Typography variant=\"body1\" gutterBottom align=\"center\">\n          Make sure to follow us to get notified when the results are in and the\n          mint starts.\n        </Typography>\n      </Stack>\n    );\n  } else if (raffleState === RAFFLE_STATE.CLOSED) {\n    return (\n      <Stack spacing={2} flex={1}>\n        <Typography variant=\"h2\">The raffle has been closed</Typography>\n        <Typography variant=\"body1\" gutterBottom align=\"center\"></Typography>\n      </Stack>\n    );\n  }\n  return (\n    <Stack spacing={2} justifyContent=\"space-between\" flex={1}>\n      <Stack direction=\"column\" justifyContent=\"center\" alignItems=\"center\">\n        <CircularProgress size={24} />\n      </Stack>\n    </Stack>\n  );\n}\n","const initialState = {\n  loading: false,\n  account: null,\n  minter: null,\n  mintPass: null,\n  erc721: null,\n  web3: null,\n  errorMsg: \"\",\n  networkId: null,\n  hasParticipatedInRaffle: null,\n};\n\nconst blockchainReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"CONNECTION_REQUEST\":\n      return {\n        ...initialState,\n        loading: true,\n      };\n    case \"CONNECTION_SUCCESS\":\n      return {\n        ...state,\n        loading: false,\n        account: action.payload.account,\n        minter: action.payload.minter,\n        mintPass: action.payload.mintPass,\n        erc721: action.payload.erc721,\n        web3: action.payload.web3,\n        networkId: action.payload.networkId,\n      };\n    case \"CONNECTION_FAILED\":\n      return {\n        ...initialState,\n        loading: false,\n        errorMsg: action.payload,\n      };\n    case \"UPDATE_ACCOUNT\":\n      return {\n        ...state,\n        account: action.payload.account,\n      };\n    case \"RAFFLE_STATUS\":\n      return {\n        ...state,\n        hasParticipatedInRaffle: action.payload.hasParticipatedInRaffle,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default blockchainReducer;\n","import CONFIG from \"../../config.json\";\n\nconst initialState = {\n  loading: false,\n  totalSupply: \"?\",\n  availableSupply: CONFIG.MAX_SUPPLY,\n  price: CONFIG.PUBLIC_WEI_COST / 1e18,\n  maxPerWallet: null,\n  mintPaused: null,\n  mintEnded: null,\n  whitelistedOnly: null,\n  isWhitelisted: null,\n  amountMinted: null,\n  error: false,\n  errorMsg: \"\",\n};\n\nconst dataReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"CHECK_DATA_REQUEST\":\n      return {\n        ...state,\n        loading: true,\n        error: false,\n        errorMsg: \"\",\n      };\n    case \"CHECK_DATA_SUCCESS\":\n      return {\n        ...state,\n        loading: false,\n        totalSupply: action.payload.totalSupply,\n        availableSupply: action.payload.availableSupply,\n        price: action.payload.price,\n        maxPerWallet: action.payload.maxPerWallet,\n        mintPaused: action.payload.mintPaused,\n        mintEnded: action.payload.mintEnded,\n        whitelistedOnly: action.payload.whitelistedOnly,\n        isWhitelisted: action.payload.isWhitelisted,\n        amountMinted: action.payload.amountMinted,\n        error: false,\n        errorMsg: \"\",\n      };\n    case \"CHECK_DATA_FAILED\":\n      return {\n        ...initialState,\n        loading: false,\n        error: true,\n        errorMsg: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default dataReducer;\n","export interface IApp {\n  isLoading: boolean;\n}\n\nconst initialState = {\n  isLoading: false,\n};\n\nconst appReducer = (state = initialState, action) => {\n  switch (action.type) {\n    default:\n      return state;\n  }\n};\n\nexport default appReducer;\n","import { applyMiddleware, compose, createStore, combineReducers } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport blockchainReducer from \"./blockchain/blockchainReducer\";\nimport dataReducer from \"./data/dataReducer\";\nimport appReducer from \"./app\";\n\nconst rootReducer = combineReducers({\n  blockchain: blockchainReducer,\n  data: dataReducer,\n  app: appReducer,\n});\n\nconst middleware = [thunk];\nconst composeEnhancers = compose(applyMiddleware(...middleware));\n\nconst configureStore = () => {\n  return createStore(rootReducer, composeEnhancers);\n};\n\nconst store = configureStore();\n\nexport default store;\n","import store from \"../store\";\n\nconst fetchDataRequest = () => {\n  return {\n    type: \"CHECK_DATA_REQUEST\",\n  };\n};\n\nconst fetchDataSuccess = (payload) => {\n  return {\n    type: \"CHECK_DATA_SUCCESS\",\n    payload: payload,\n  };\n};\n\nconst fetchDataFailed = (payload) => {\n  return {\n    type: \"CHECK_DATA_FAILED\",\n    payload: payload,\n  };\n};\n\nexport const fetchData = () => {\n  return async (dispatch) => {\n    dispatch(fetchDataRequest());\n    try {\n      let totalSupply = await store\n        .getState()\n        .blockchain.erc721.methods.totalSupply()\n        .call();\n\n      let availableSupply = await store\n        .getState()\n        .blockchain.minter.methods.availableSupply()\n        .call();\n\n      // let price = await store\n      //   .getState()\n      //   .blockchain.minter.methods.PRICE()\n      //   .call();\n\n      let maxPerWallet = await store\n        .getState()\n        .blockchain.minter.methods.MAX_PER_WALLET()\n        .call();\n\n      let mintPaused = await store\n        .getState()\n        .blockchain.minter.methods.mintPaused()\n        .call();\n\n      let mintEnded = await store\n        .getState()\n        .blockchain.minter.methods.mintEnded()\n        .call();\n\n      let whitelistedOnly = await store\n        .getState()\n        .blockchain.minter.methods.whitelistedOnly()\n        .call();\n\n      let account = await store.getState().blockchain.account;\n\n      let isWhitelisted = await store\n        .getState()\n        .blockchain.minter.methods.whitelisted(account)\n        .call();\n\n      let amountMinted = await store\n        .getState()\n        .blockchain.minter.methods.mintedSale(account)\n        .call();\n\n      dispatch(\n        fetchDataSuccess({\n          totalSupply: +totalSupply,\n          availableSupply: +availableSupply,\n          // price: price,\n          maxPerWallet: +maxPerWallet,\n          mintPaused,\n          mintEnded,\n          whitelistedOnly,\n          isWhitelisted,\n          amountMinted: +amountMinted,\n        })\n      );\n    } catch (err) {\n      console.log(err);\n      dispatch(fetchDataFailed(\"Could not load data from contract.\"));\n    }\n  };\n};\n","import Web3EthContract from \"web3-eth-contract\";\nimport Web3 from \"web3\";\nimport Web3Modal from \"web3modal\";\nimport WalletConnect from \"@walletconnect/web3-provider\";\nimport WalletLink from \"walletlink\";\nimport { fetchData } from \"../data/dataActions\";\nimport minterABI from \"../../abi/minter.json\";\nimport mintPassABI from \"../../abi/mintpass.json\";\nimport erc721ABI from \"../../abi/erc721.json\";\nimport CONFIG from \"../../config.json\";\n\nconst connectRequest = () => {\n  return {\n    type: \"CONNECTION_REQUEST\",\n  };\n};\n\nconst connectSuccess = (payload) => {\n  return {\n    type: \"CONNECTION_SUCCESS\",\n    payload: payload,\n  };\n};\n\nconst connectFailed = (payload) => {\n  return {\n    type: \"CONNECTION_FAILED\",\n    payload: payload,\n  };\n};\n\nconst updateAccountRequest = (payload) => {\n  return {\n    type: \"UPDATE_ACCOUNT\",\n    payload: payload,\n  };\n};\n\nconst receiveNetworkId = (payload) => {\n  return {\n    type: \"RECEIVE_NETWORK\",\n    payload: payload,\n  };\n};\n\nconst updateRaffleStatus = (payload) => {\n  return {\n    type: \"RAFFLE_STATUS\",\n    payload: payload,\n  };\n};\n\nconst providerOptions = {\n  // walletconnect: {\n  //   package: WalletConnect,\n  //   options: {\n  //     infuraId: \"1cdd280a1c68480f908bf48406db4ca5\",\n  //   },\n  // },\n  walletlink: {\n    package: WalletLink,\n    options: {\n      appName: \"MLK Mint\",\n      infuraId: \"1cdd280a1c68480f908bf48406db4ca5\",\n    },\n  },\n};\n\nconst web3Modal = new Web3Modal({\n  // network: \"mainnet\", // optional\n  cacheProvider: false, // optional\n  providerOptions, // required\n  // disableInjectedProvider: true,\n});\n\nexport const connect = () => {\n  return async (dispatch) => {\n    await web3Modal.clearCachedProvider();\n    const provider = await web3Modal.connect();\n    dispatch(connectRequest());\n    // Web3EthContract.setProvider(provider);\n    let web3 = new Web3(provider);\n    try {\n      const accounts = await web3.eth.getAccounts();\n      const networkId = await web3.eth.net.getId();\n      const minter = new web3.eth.Contract(\n        // @ts-expect-error\n        minterABI,\n        CONFIG.MINTER_ADDRESS\n      );\n      const mintPass = new web3.eth.Contract(\n        // @ts-expect-error\n        mintPassABI,\n        CONFIG.MINTPASS_ADDRESS\n      );\n      const erc721 = new web3.eth.Contract(\n        // @ts-expect-error\n        erc721ABI,\n        CONFIG.ERC721_ADDRESS\n      );\n      dispatch(\n        connectSuccess({\n          account: accounts[0],\n          minter,\n          mintPass,\n          erc721,\n          web3,\n          networkId,\n        })\n      );\n      provider.on(\"accountsChanged\", (accounts) => {\n        dispatch(updateAccount(accounts[0]));\n      });\n      provider.on(\"chainChanged\", async () => {\n        const networkId = await web3.eth.net.getId();\n        dispatch(\n          connectSuccess({\n            account: accounts[0],\n            minter,\n            mintPass,\n            erc721,\n            web3,\n            networkId,\n          })\n        );\n      });\n    } catch (err) {\n      dispatch(connectFailed(\"Something went wrong.\"));\n    }\n  };\n};\n\nexport const sign = () => {\n  return async (dispatch) => {\n    // await web3Modal.clearCachedProvider();\n    const provider = await web3Modal.connect();\n    // dispatch(connectRequest());\n    let web3 = new Web3(provider);\n    try {\n      const accounts = await web3.eth.getAccounts();\n      const signature = await web3.eth.personal.sign(\n        \"Rawrr\",\n        accounts[0],\n        null\n      );\n      await fetch(`${CONFIG.API_URL}/raffle`, {\n        method: \"POST\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          address: accounts[0],\n          signature: signature,\n        }),\n      });\n      const response = await fetch(`${CONFIG.API_URL}/raffle/${accounts[0]}`, {\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n        },\n      });\n      const { status } = await response.json();\n      const hasParticipated = status === \"participated\";\n      dispatch(\n        updateRaffleStatus({ hasParticipatedInRaffle: hasParticipated })\n      );\n    } catch (err) {\n      console.error(err);\n    }\n  };\n};\n\nexport const updateAccount = (account) => {\n  return async (dispatch) => {\n    dispatch(updateAccountRequest({ account: account }));\n    dispatch(fetchData());\n  };\n};\n","import React, { useEffect, useState, useRef } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchData } from \"../redux/data/dataActions\";\nimport { connect } from \"../redux/blockchain/blockchainActions\";\nimport Typography from \"@mui/material/Typography\";\nimport Stack from \"@mui/material/Stack\";\nimport Button from \"@mui/material/Button\";\nimport Box from \"@mui/material/Box\";\nimport Alert from \"@mui/material/Alert\";\nimport FilledInput from \"@mui/material/FilledInput\";\nimport InputAdornment from \"@mui/material/InputAdornment\";\nimport IconButton from \"@mui/material/IconButton\";\nimport RemoveOutlinedIcon from \"@mui/icons-material/RemoveOutlined\";\nimport AddOutlinedIcon from \"@mui/icons-material/AddOutlined\";\nimport CircleIcon from \"@mui/icons-material/Circle\";\nimport LoadingButton from \"@mui/lab/LoadingButton\";\nimport CircularProgress from \"@mui/material/CircularProgress\";\nimport Countdown from \"react-countdown\";\nimport Chip from \"@mui/material/Chip\";\nimport Link from \"@mui/material/Link\";\nimport { isMobile } from \"react-device-detect\";\n\nimport CONFIG from \"../config.json\";\n\nconst shorten = (str: string): string => {\n  if (str.length < 10) return str;\n  return `${str.slice(0, 6)}...${str.slice(str.length - 4)}`;\n};\n\nenum MINT_STATE {\n  NOT_CONNECTED,\n  WRONG_NETWORK,\n  CONNECTED,\n  NOT_STARTED,\n  WHITELISTED_ONLY,\n  PUBLIC_SALE,\n  PRE_SALE,\n  CLAIMING,\n  MINTED,\n  ERROR,\n  CLOSED,\n  LOADING,\n}\n\nfunction Actions() {\n  const dispatch = useDispatch();\n  const data = useSelector<any, any>((state) => state.data);\n  const blockchain = useSelector<any, any>((state) => state.blockchain);\n  const [claimingNft, setClaimingNft] = useState(false);\n  const [mintAmount, setMintAmount] = useState(1);\n  const [error, setError] = useState(\"\");\n  const [mintReceipt, setMintReceipt] = useState(null);\n  const getData = () => {\n    if (blockchain.account !== \"\" && blockchain.minter !== null) {\n      dispatch(fetchData());\n    }\n  };\n\n  useEffect(\n    () => setMintAmount(data.maxPerWallet - data.amountMinted),\n    [data.maxPerWallet, data.amountMinted]\n  );\n\n  useEffect(() => getData(), [blockchain.account]);\n\n  function catchError(err: Error) {\n    console.error(err);\n    if (err.message) {\n      setError(err.message);\n    } else {\n      setError(\"Something went wrong while trying to mint the NFT\");\n    }\n  }\n\n  const claimNFTs = async () => {\n    setClaimingNft(true);\n    try {\n      const cost = data.whitelistedOnly\n        ? CONFIG.WL_WEI_COST\n        : CONFIG.PUBLIC_WEI_COST;\n      const receipt = await blockchain.minter.methods.mint(mintAmount).send({\n        to: CONFIG.MINTER_ADDRESS,\n        from: blockchain.account,\n        value: cost * mintAmount,\n      });\n      console.log(receipt);\n      setClaimingNft(false);\n      setMintReceipt(receipt);\n      dispatch(fetchData());\n    } catch (err) {\n      catchError(err);\n      setClaimingNft(false);\n    }\n  };\n\n  const decrementMintAmount = () => {\n    let newMintAmount = mintAmount - 1;\n    if (newMintAmount < 1) {\n      newMintAmount = 1;\n    }\n    setMintAmount(newMintAmount);\n  };\n\n  const incrementMintAmount = () => {\n    let newMintAmount = mintAmount + 1;\n    if (\n      newMintAmount <=\n      Math.min(\n        data.maxPerWallet - data.amountMinted,\n        data.availableSupply - data.totalSupply\n      )\n    ) {\n      setMintAmount(newMintAmount);\n    }\n  };\n\n  function getMintState(): MINT_STATE {\n    if (!blockchain.account || blockchain.minter === null) {\n      return MINT_STATE.NOT_CONNECTED;\n    } else if (blockchain.networkId != CONFIG.NETWORK.ID) {\n      return MINT_STATE.WRONG_NETWORK;\n    } else if (data.mintPaused) {\n      return MINT_STATE.NOT_STARTED;\n    } else if (claimingNft) {\n      return MINT_STATE.CLAIMING;\n    } else if (mintReceipt) {\n      return MINT_STATE.MINTED;\n    } else if (data.totalSupply >= data.availableSupply || data.mintEnded) {\n      return MINT_STATE.CLOSED;\n    } else if (data.whitelistedOnly) {\n      return data.isWhitelisted\n        ? MINT_STATE.PUBLIC_SALE\n        : MINT_STATE.WHITELISTED_ONLY;\n    } else if (data.mintPaused === false) {\n      return MINT_STATE.PUBLIC_SALE;\n    }\n    return MINT_STATE.LOADING;\n  }\n\n  if (getMintState() === MINT_STATE.NOT_CONNECTED) {\n    return (\n      <Stack spacing={2}>\n        {isMobile && typeof window.ethereum === \"undefined\" && (\n          <Typography>\n            On Mobile?{\" \"}\n            <Link href=\"https://metamask.app.link/dapp/metalionkingdom.com/mint\">\n              Open in Metamask Mobile\n            </Link>\n          </Typography>\n        )}\n        <Button\n          onClick={(e) => {\n            e.preventDefault();\n            dispatch(connect());\n            getData();\n          }}\n          variant=\"contained\"\n          fullWidth\n        >\n          Connect Your Wallet\n        </Button>\n      </Stack>\n    );\n  } else if (getMintState() === MINT_STATE.WRONG_NETWORK) {\n    return (\n      <Alert variant=\"outlined\" severity=\"error\">\n        You are not connected to the {CONFIG.NETWORK.NAME} network, please open\n        Metamask and make sure you are connected with the right account to the\n        Ethereum network.\n      </Alert>\n    );\n  } else if (getMintState() === MINT_STATE.NOT_STARTED) {\n    return (\n      <Stack\n        direction=\"column\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n        spacing={1.25}\n      >\n        <Typography variant=\"body1\" gutterBottom align=\"center\">\n          Minting has not started yet. Once the timer reaches zero, refresh this\n          page and be the first to mint.\n        </Typography>\n      </Stack>\n    );\n  } else if (\n    getMintState() === MINT_STATE.PUBLIC_SALE ||\n    getMintState() === MINT_STATE.CLAIMING\n  ) {\n    return (\n      <>\n        <Stack direction=\"row\" spacing={4}>\n          <FilledInput\n            value={mintAmount}\n            disableUnderline\n            startAdornment={\n              <InputAdornment position=\"start\">\n                <IconButton\n                  aria-label=\"decrement\"\n                  size=\"small\"\n                  onClick={(e) => {\n                    e.preventDefault();\n                    decrementMintAmount();\n                  }}\n                  disabled={getMintState() === MINT_STATE.CLAIMING}\n                >\n                  <RemoveOutlinedIcon />\n                </IconButton>\n              </InputAdornment>\n            }\n            endAdornment={\n              <InputAdornment position=\"start\">\n                <IconButton\n                  aria-label=\"decrement\"\n                  size=\"small\"\n                  onClick={(e) => {\n                    e.preventDefault();\n                    incrementMintAmount();\n                  }}\n                  disabled={getMintState() === MINT_STATE.CLAIMING}\n                >\n                  <AddOutlinedIcon />\n                </IconButton>\n              </InputAdornment>\n            }\n            inputProps={{\n              style: {\n                textAlign: \"center\",\n              },\n            }}\n            fullWidth\n          />\n          <LoadingButton\n            disabled={getMintState() === MINT_STATE.CLAIMING}\n            loading={getMintState() === MINT_STATE.CLAIMING}\n            variant=\"contained\"\n            onClick={(e) => {\n              e.preventDefault();\n              claimNFTs();\n              getData();\n            }}\n            fullWidth\n          >\n            Mint NFT\n          </LoadingButton>\n        </Stack>\n        <Typography variant=\"subtitle2\">\n          {data.amountMinted} of {data.maxPerWallet} minted\n        </Typography>\n        {error && (\n          <Alert variant=\"outlined\" severity=\"error\">\n            {error}\n          </Alert>\n        )}\n      </>\n    );\n  } else if (getMintState() === MINT_STATE.CLOSED) {\n    return (\n      <Stack\n        direction=\"column\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n        spacing={2}\n      >\n        <Typography variant=\"body1\" gutterBottom align=\"center\">\n          Minting period has ended. The whole collection be will revealed soon,\n          go to OpenSea to check it out!\n        </Typography>\n        <Button\n          variant=\"contained\"\n          href={CONFIG.MARKETPLACE_LINK}\n          target=\"_blank\"\n        >\n          See collection\n        </Button>\n      </Stack>\n    );\n  } else if (getMintState() === MINT_STATE.MINTED) {\n    return (\n      <Stack\n        direction=\"column\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n        spacing={1.25}\n      >\n        {/* <Typography variant=\"h2\">NFT has been minted</Typography> */}\n        <Typography variant=\"body1\" gutterBottom align=\"center\">\n          NFT has been minted! It should soon be visible in your OpenSea\n          account, you can check the transaction below to follow it's progress.\n        </Typography>\n        <Button\n          variant=\"contained\"\n          href={`https://etherscan.io/tx/${mintReceipt.transactionHash}`}\n          target=\"_blank\"\n        >\n          View Transaction\n        </Button>\n      </Stack>\n    );\n  } else if (getMintState() === MINT_STATE.WHITELISTED_ONLY) {\n    return (\n      <Stack\n        direction=\"column\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n        spacing={1.25}\n      >\n        <Typography variant=\"body1\" gutterBottom align=\"center\">\n          The wallet you are using is not whitelisted, keep an eye on this page\n          to be the first when the public sale starts.\n        </Typography>\n      </Stack>\n    );\n  }\n  return (\n    <Stack direction=\"column\" justifyContent=\"center\" alignItems=\"center\">\n      <CircularProgress size={24} />\n    </Stack>\n  );\n}\n\nenum Phases {\n  NotStarted,\n  WhitelistedOnly,\n  Public,\n}\n\nconst TIMES = {\n  WL: 1647457200000,\n  PUBLIC: 1647543600000,\n  REVEAL: 1648234800000,\n};\n\nfunction getPhase() {\n  const now = +new Date();\n  if (now >= TIMES.WL && now < TIMES.PUBLIC) {\n    return Phases.WhitelistedOnly;\n  } else if (now >= TIMES.PUBLIC) {\n    return Phases.Public;\n  }\n  return Phases.NotStarted;\n}\n\nexport default function Mint() {\n  const dispatch = useDispatch();\n  const whitelistedOnly =\n    getPhase() === Phases.WhitelistedOnly || getPhase() === Phases.NotStarted;\n  const cost = whitelistedOnly ? CONFIG.WL_WEI_COST : CONFIG.PUBLIC_WEI_COST;\n  const blockchain = useSelector<any, any>((state) => state.blockchain);\n  useEffect(() => {\n    if (!(\"Notification\" in window)) {\n      console.log(\"This browser does not support desktop notification\");\n    } else {\n      Notification.requestPermission();\n    }\n  }, []);\n\n  const getData = () => {\n    if (blockchain.account !== \"\" && blockchain.minter !== null) {\n      dispatch(fetchData());\n    }\n  };\n\n  const phase = getPhase();\n\n  return (\n    <Stack spacing={2} justifyContent=\"space-between\" flex={1}>\n      <Stack mb={1}>\n        <Box>\n          {blockchain.account && (\n            <Chip\n              size=\"small\"\n              label={`Connected with ${shorten(blockchain.account)}`}\n              icon={\n                <CircleIcon\n                  sx={{\n                    fontSize: \"12px!important\",\n                    marginLeft: \"12px!important\",\n                    color: \"lightgreen!important\",\n                  }}\n                />\n              }\n              sx={{\n                fontSize: \"12px!important\",\n              }}\n            />\n          )}\n        </Box>\n      </Stack>\n      <Stack direction=\"row\" justifyContent=\"space-between\">\n        <Box>\n          <Typography variant=\"subtitle2\" align=\"left\" gutterBottom>\n            {whitelistedOnly ? \"WL Price\" : \"Price\"}\n          </Typography>\n          <Typography variant=\"subtitle1\" align=\"left\">\n            {cost / 1e18} {CONFIG.NETWORK.SYMBOL}\n          </Typography>\n        </Box>\n        <Box>\n          {phase === Phases.NotStarted && (\n            <Countdown\n              date={TIMES.WL}\n              renderer={({ days, hours, minutes, seconds, completed }) => {\n                if (completed) {\n                  return null;\n                } else {\n                  return (\n                    <>\n                      <Typography\n                        variant=\"subtitle2\"\n                        align=\"right\"\n                        gutterBottom\n                      >\n                        Whitelist sale starts in\n                      </Typography>\n                      <Typography\n                        variant=\"subtitle1\"\n                        align=\"right\"\n                        gutterBottom\n                      >\n                        {days > 0 && `${days} days, `} {hours} hours and{\" \"}\n                        {minutes} minutes\n                      </Typography>\n                    </>\n                  );\n                }\n              }}\n              // onComplete={() => {\n              //   new Notification(\n              //     \"Public Mint of Meta Lion Kingdom has started!\"\n              //   );\n              //   getData();\n              // }}\n            />\n          )}\n          {phase === Phases.WhitelistedOnly && (\n            <Countdown\n              date={TIMES.PUBLIC}\n              renderer={({ days, hours, minutes, seconds, completed }) => {\n                if (completed) {\n                  return null;\n                } else {\n                  return (\n                    <>\n                      <Typography\n                        variant=\"subtitle2\"\n                        align=\"right\"\n                        gutterBottom\n                      >\n                        Public starts sale in\n                      </Typography>\n                      <Typography\n                        variant=\"subtitle1\"\n                        align=\"right\"\n                        gutterBottom\n                      >\n                        {days} days, {hours} hours and {minutes} minutes\n                      </Typography>\n                    </>\n                  );\n                }\n              }}\n              // onComplete={() => {\n              //   new Notification(\n              //     \"Public Mint of Meta Lion Kingdom has started!\"\n              //   );\n              //   getData();\n              // }}\n            />\n          )}\n          {phase === Phases.Public && (\n            <Countdown\n              date={TIMES.REVEAL}\n              renderer={({ days, hours, minutes, seconds, completed }) => {\n                if (completed) {\n                  return null;\n                } else {\n                  return (\n                    <>\n                      <Typography\n                        variant=\"subtitle2\"\n                        align=\"right\"\n                        gutterBottom\n                      >\n                        Reveal will be in\n                      </Typography>\n                      <Typography\n                        variant=\"subtitle1\"\n                        align=\"right\"\n                        gutterBottom\n                      >\n                        {days} days, {hours} hours and {minutes} minutes\n                      </Typography>\n                    </>\n                  );\n                }\n              }}\n            />\n          )}\n        </Box>\n      </Stack>\n      <Actions />\n    </Stack>\n  );\n  return null;\n}\n","import React, { useState } from \"react\";\nimport Raffle from \"./states/Raffle\";\nimport Mint from \"./states/Mint\";\nimport CONFIG from \"./config.json\";\n\nfunction App() {\n  if (CONFIG.PRIMARY_STATE === \"RAFFLE\") {\n    return <Raffle />;\n  } else if (CONFIG.PRIMARY_STATE === \"MINT\") {\n    return <Mint />;\n  }\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createTheme } from \"@mui/material/styles\";\n\nexport default createTheme({\n  palette: {\n    mode: \"dark\",\n    primary: {\n      main: \"#b79861\",\n    },\n    background: {\n      default: \"#1d1c2e\",\n    },\n  },\n  typography: {\n    fontSize: 16,\n    fontFamily: \"inherit\",\n    button: {\n      textTransform: \"none\",\n      fontSize: \"1rem\",\n      fontWeight: 600,\n    },\n    h2: {\n      fontSize: \"1.6rem\",\n      fontWeight: 500,\n      letterSpacing: \"1.3px\",\n    },\n    body1: {\n      fontSize: \"1rem\",\n      fontWeight: 400,\n      lineHeight: \"1.5rem\",\n    },\n    subtitle1: {\n      fontSize: \"1.25rem\",\n      fontWeight: 500,\n    },\n    subtitle2: {\n      fontSize: \"0.875rem\",\n      textTransform: \"uppercase\",\n      fontWeight: 400,\n      letterSpacing: \"0.125rem\",\n    },\n  },\n  shape: {\n    borderRadius: 0,\n  },\n  components: {\n    MuiButtonBase: {\n      defaultProps: {\n        disableRipple: true,\n        disableTouchRipple: true,\n      },\n    },\n    MuiButton: {\n      defaultProps: {\n        disableRipple: true,\n        disableFocusRipple: true,\n        disableTouchRipple: true,\n        disableElevation: true,\n      },\n      styleOverrides: {\n        root: {\n          height: \"44px\",\n        },\n      },\n    },\n    MuiFilledInput: {\n      styleOverrides: {\n        input: {\n          padding: \"8px 0\",\n        },\n      },\n    },\n    MuiAlert: {\n      styleOverrides: {\n        message: {\n          fontSize: \"0.875rem\",\n        },\n      },\n    },\n  },\n});\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport store from \"./redux/store\";\nimport { Provider } from \"react-redux\";\nimport { ThemeProvider } from \"@mui/material/styles\";\nimport { CssBaseline, GlobalStyles } from \"@mui/material\";\nimport { Web3ContextProvider } from \"./web3-context\";\nimport theme from \"./theme\";\nimport \"./styles/widget.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <App />\n      </ThemeProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}